/**
 * This file implements a catch-all route that renders the user-facing pages
 * generated by Puck. For any route visited (with exception of other hardcoded
 * pages in /app), it will check your database (via `getPage`) for a Puck page
 * and render it using <Render>.
 *
 * All routes produced by this page are statically rendered using incremental
 * static site generation. After the first visit, the page will be cached as
 * a static file. Subsequent visits will receive the cache. Publishing a page
 * will invalidate the cache as the page is written in /api/puck/route.ts
 */

import { Metadata } from 'next'
import { notFound } from 'next/navigation'
import { getPage } from '../../../../lib/get-page'
import { Client } from './client'

export async function generateMetadata({
  params,
  searchParams,
}: {
  params: Promise<{ puckPath: string[] }>
  searchParams: { [key: string]: string | string[] | undefined }
}): Promise<Metadata> {
  const { puckPath = [] } = await params
  const path = `/${puckPath.join('/')}`
  // const heads = await headers()
  // //console.log('HEEDARE:: ', heads)
  // const referer = heads.get('referer')

  // let id: string | null = null

  // if (referer) {
  //   try {
  //     const url = new URL(referer)
  //     id = url.searchParams.get('id')
  //   } catch (err) {
  //     console.warn('Failed to parse referer URL:', err)
  //   }
  // }

  const page = await getPage(path, searchParams.id as unknown as number)
  return {
    title: page?.root.props?.title,
  }
}

export default async function Page({
  params,
  searchParams,
}: {
  params: Promise<{ puckPath: string[] }>
  searchParams: { [key: string]: string | string[] | undefined }
}) {
  console.log('THE PUCK WEBSITE SHOW IS RENDERED')
  const { puckPath = [] } = await params
  const path = `/${puckPath.join('/')}`

  // console.log('Search params server component: ', await searchParams, await params)

  // const heads = await headers()
  // //console.log('HEEDARE:: ', heads)
  // const referer = heads.get('referer')

  // let id: string | null = null

  // if (referer) {
  //   try {
  //     const url = new URL(referer)
  //     id = url.searchParams.get('id')
  //   } catch (err) {
  //     console.warn('Failed to parse referer URL:', err)
  //   }
  // }

  // console.log('THE GOTTEN IDL ', id)
  const data = await getPage(path, searchParams.id as unknown as number)
  if (!data) {
    return notFound()
  }
  return <Client data={data} />
}

// Force Next.js to produce static pages: https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic
// Delete this if you need dynamic rendering, such as access to headers or cookies
//export const dynamic = 'force-static'
